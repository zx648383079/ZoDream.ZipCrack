<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="allFile" xml:space="preserve">
    <value>所有文件</value>
  </data>
  <data name="cipherFileLabelText" xml:space="preserve">
    <value>文件名</value>
  </data>
  <data name="cipherLabelText" xml:space="preserve">
    <value>加密ZIP</value>
  </data>
  <data name="clearBtnText" xml:space="preserve">
    <value>清空</value>
  </data>
  <data name="clearTip" xml:space="preserve">
    <value>确定要清空当前数据？</value>
  </data>
  <data name="converterError" xml:space="preserve">
    <value>转换失败</value>
  </data>
  <data name="converterSuccess" xml:space="preserve">
    <value>转换成功</value>
  </data>
  <data name="converterZip" xml:space="preserve">
    <value>解压成zip</value>
  </data>
  <data name="cvtBtnContent" xml:space="preserve">
    <value>转换</value>
  </data>
  <data name="decodeBtnContent" xml:space="preserve">
    <value>解码文件</value>
  </data>
  <data name="decodeFile" xml:space="preserve">
    <value>解码Deflated文件</value>
  </data>
  <data name="DecodeLabelText" xml:space="preserve">
    <value>Deflated文件</value>
  </data>
  <data name="encodingLabelText" xml:space="preserve">
    <value>编码</value>
  </data>
  <data name="fileLabelText" xml:space="preserve">
    <value>明文文件</value>
  </data>
  <data name="getBtnContent" xml:space="preserve">
    <value>获取Keys</value>
  </data>
  <data name="getError" xml:space="preserve">
    <value>获取Keys失败</value>
  </data>
  <data name="getKey" xml:space="preserve">
    <value>压缩包获取key</value>
  </data>
  <data name="getKeyByFile" xml:space="preserve">
    <value>文件获取key</value>
  </data>
  <data name="getKeyByText" xml:space="preserve">
    <value>明文获取key</value>
  </data>
  <data name="getSuccess" xml:space="preserve">
    <value>获取Keys成功</value>
  </data>
  <data name="keyLabelText" xml:space="preserve">
    <value>内部Keys</value>
  </data>
  <data name="keyTip" xml:space="preserve">
    <value>通过明文攻击获取的密钥</value>
  </data>
  <data name="modeLabelText" xml:space="preserve">
    <value>切换模式</value>
  </data>
  <data name="openBtnContent" xml:space="preserve">
    <value>选择ZIP</value>
  </data>
  <data name="plainError" xml:space="preserve">
    <value>不存在对应的文件</value>
  </data>
  <data name="plainLabelText" xml:space="preserve">
    <value>未加密ZIP</value>
  </data>
  <data name="pwdNewLabel" xml:space="preserve">
    <value>新密码</value>
  </data>
  <data name="pwdRuleLabel" xml:space="preserve">
    <value>密码规则</value>
  </data>
  <data name="recover" xml:space="preserve">
    <value>获取密码</value>
  </data>
  <data name="recoverBtnContent" xml:space="preserve">
    <value>尝试恢复</value>
  </data>
  <data name="recoverError" xml:space="preserve">
    <value>修复密码失败</value>
  </data>
  <data name="recoverSuccess" xml:space="preserve">
    <value>修复密码成功</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="Select File" xml:space="preserve">
    <value>选择文件</value>
  </data>
  <data name="selectAFileTip" xml:space="preserve">
    <value>请选择要提取的文件名</value>
  </data>
  <data name="selectPlainTip" xml:space="preserve">
    <value>选择未加密的压缩文件</value>
  </data>
  <data name="selectZipTip" xml:space="preserve">
    <value>选择加密过的压缩文件</value>
  </data>
  <data name="stopBtnText" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="stopTip" xml:space="preserve">
    <value>确认要停止当前操作？</value>
  </data>
  <data name="textLabelText" xml:space="preserve">
    <value>明文字符串</value>
  </data>
  <data name="tip" xml:space="preserve">
    <value>提示</value>
  </data>
  <data name="unzip" xml:space="preserve">
    <value>解压</value>
  </data>
  <data name="unzipBtnContent" xml:space="preserve">
    <value>选择解压到文件夹</value>
  </data>
  <data name="unzipError" xml:space="preserve">
    <value>解压失败</value>
  </data>
  <data name="unzipFileBtnText" xml:space="preserve">
    <value>提取当前文件</value>
  </data>
  <data name="unzipFilesBtnText" xml:space="preserve">
    <value>提取全部文件</value>
  </data>
  <data name="unzipSuccess" xml:space="preserve">
    <value>解压成功</value>
  </data>
  <data name="useCPlus" xml:space="preserve">
    <value>使用原生功能</value>
  </data>
  <data name="useCPlusTip" xml:space="preserve">
    <value>开启原生功能，基于C++，性能更高</value>
  </data>
  <data name="zipName" xml:space="preserve">
    <value>ZIP文件</value>
  </data>
</root>